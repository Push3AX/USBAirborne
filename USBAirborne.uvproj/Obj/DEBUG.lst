C51 COMPILER V9.60.0.0   DEBUG                                                                         12/20/2023 01:20:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DEBUG
OBJECT MODULE PLACED IN .\Obj\DEBUG.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE lib\DEBUG.C LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\) DEBUG CODE PRINT(.\Obj\DEBU
                    -G.lst) PAGEWIDTH(132) PAGELENGTH(5000) TABS(2) PREPRINT(.\Obj\DEBUG.i) OBJECT(.\Obj\DEBUG.obj)

line level    source

   1          /********************************** (C) COPYRIGHT *******************************
   2          * File Name          : Debug.C
   3          * Author             : WCH
   4          * Version            : V1.3
   5          * Date               : 2018-11-07 14:49:47
   6          * Description        : CH554 DEBUG Interface
   7                                 CH554主频修改、延时函数定义
   8                                 串口0和串口1初始化
   9                                 串口0和串口1的收发子函数
  10                                 看门狗初始化
  11          *******************************************************************************/
  12          #include "CH554.H"
  13          #include "Debug.H"
  14          
  15          
  16          /*******************************************************************************
  17          * Function Name  : CfgFsys( )
  18          * Description    : CH554时钟选择和配置函数,默认使用Fsys 6MHz，
  19                             FREQ_SYS可以通过CLOCK_CFG配置得到，公式如下：
  20                             Fsys = (Fosc * 4/(CLOCK_CFG & MASK_SYS_CK_SEL);
  21                             具体时钟需要自己配置
  22          * Input          : None
  23          * Output         : None
  24          * Return         : None
  25          *******************************************************************************/
  26          void CfgFsys()
  27          {
  28   1      #if OSC_EN_XT
                  SAFE_MOD = 0x55;
                  SAFE_MOD = 0xAA;
                  CLOCK_CFG |=  bOSC_EN_XT;   // 使能外部晶振
                  CLOCK_CFG &= ~bOSC_EN_INT;  // 关闭内部晶振
              #endif
  34   1          SAFE_MOD = 0x55;
  35   1          SAFE_MOD = 0xAA;
  36   1      #if FREQ_SYS == 24000000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x06;  // 24MHz
              #elif FREQ_SYS == 16000000
  39   1          CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x05;  // 16MHz
  40   1      #elif FREQ_SYS == 12000000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x04;  // 12MHz
              #elif FREQ_SYS == 6000000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x03;  // 6MHz
              #elif FREQ_SYS == 3000000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x02;  // 3MHz
              #elif FREQ_SYS == 750000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x01;  // 750KHz
              #elif FREQ_SYS == 187500
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x00;  // 187.5KHz
              #else
                  #error "FREQ_SYS value is invalid!"
              #endif
  53   1          SAFE_MOD = 0x00;
  54   1      }
  55          
  56          
  57          /*******************************************************************************
  58          * Function Name  : mDelayus(UNIT16 n)
  59          * Description    : us延时函数, 单位uS
  60          * Input          : UNIT16 n
  61          * Output         : None
  62          * Return         : None
  63          *******************************************************************************/
  64          void mDelayuS(UINT16 n)
  65          {
  66   1      #ifdef  FREQ_SYS
  67   1      #if   FREQ_SYS <= 6000000
                  n >>= 2;
              #endif
  70   1      #if   FREQ_SYS <= 3000000
                  n >>= 2;
              #endif
  73   1      #if   FREQ_SYS <= 750000
                  n >>= 4;
              #endif
  76   1      #endif
  77   1          while(n)            // total = 12~13 Fsys cycles, 1uS @Fsys=12MHz
  78   1          {
  79   2              ++ SAFE_MOD;    // 2 Fsys cycles, for higher Fsys, add operation here
  80   2      #ifdef  FREQ_SYS
  81   2      #if   FREQ_SYS >= 14000000
  82   2              ++ SAFE_MOD;
  83   2      #endif
  84   2      #if   FREQ_SYS >= 16000000
  85   2              ++ SAFE_MOD;
  86   2      #endif
  87   2      #if   FREQ_SYS >= 18000000
                      ++ SAFE_MOD;
              #endif
  90   2      #if   FREQ_SYS >= 20000000
                      ++ SAFE_MOD;
              #endif
  93   2      #if   FREQ_SYS >= 22000000
                      ++ SAFE_MOD;
              #endif
  96   2      #if   FREQ_SYS >= 24000000
                      ++ SAFE_MOD;
              #endif
  99   2      #endif
 100   2              -- n;
 101   2          }
 102   1      }
 103          
 104          
 105          /*******************************************************************************
 106          * Function Name  : mDelayms(UNIT16 n)
 107          * Description    : ms延时函数, 单位mS
 108          * Input          : UNIT16 n
 109          * Output         : None
 110          * Return         : None
 111          *******************************************************************************/
 112          void mDelaymS(UINT16 n)
 113          {
 114   1          while(n)
 115   1          {
 116   2      #ifdef  DELAY_MS_HW
                      while((TKEY_CTRL & bTKC_IF) == 0);
                      while(TKEY_CTRL & bTKC_IF);
              #else
 120   2              mDelayuS(1000);
 121   2      #endif
 122   2              -- n;
 123   2          }
 124   1      }
 125          
 126          
 127          /*******************************************************************************
 128          * Function Name  : mInitSTDIO()
 129          * Description    : CH554串口0初始化,默认使用T1作UART0的波特率发生器,也可以使用T2
 130                             作为波特率发生器
 131          * Input          : None
 132          * Output         : None
 133          * Return         : None
 134          *******************************************************************************/
 135          void mInitSTDIO()
 136          {
 137   1          SCON = 0x50;    // SERIAL MODE 1: SM0 = 0, SM1 = 1, SM2 = 0, REN = 1, TI = 0, RI = 0
 138   1          
 139   1          // 使用Timer1作为波特率发生器
 140   1          RCLK = 0;       // UART0接收时钟
 141   1          TCLK = 0;       // UART0发送时钟
 142   1          PCON |= SMOD;   // 波特率倍增
 143   1          TMOD = TMOD & ~ bT1_GATE & ~ bT1_CT & ~ MASK_T1_MOD | bT1_M1;   // 0x20, Timer1作为8位自动重载定时器
 144   1          T2MOD = T2MOD | bTMR_CLK | bT1_CLK;                             // Timer1时钟选择
 145   1          
 146   1          TL1 = UART0_BPS;
 147   1          TH1 = UART0_BPS;
 148   1          TR1 = 1;        // 启动定时器1
 149   1          
 150   1          TI = 1;         // 为了配合printf函数
 151   1      }
 152          
 153          
 154          /*******************************************************************************
 155          * Function Name  : CH554UART0SendByte(UINT8 SendDat)
 156          * Description    : CH554UART0发送一个字节
 157          * Input          : UINT8 SendDat；要发送的数据
 158          * Output         : None
 159          * Return         : None
 160          *******************************************************************************/
 161          void CH554UART0SendByte(UINT8 SendDat)
 162          {
 163   1          while(TI == 0);     // 等待上一次发送完成
 164   1          TI = 0;             // 清除发送完成标志位
 165   1          SBUF = SendDat;     // 查询发送, 中断方式可不用下面2条语句, 但发送前需TI = 0
 166   1      }
 167          
 168          
 169          /*******************************************************************************
 170          * Function Name  : CH554UART0RcvByte()
 171          * Description    : CH554UART0接收一个字节
 172          * Input          : None
 173          * Output         : None
 174          * Return         : SBUF
 175          *******************************************************************************/
 176          UINT8 CH554UART0RcvByte()
 177          {
 178   1          while(RI == 0);     // 查询接收, 中断方式可不用
 179   1          RI = 0;
 180   1          return SBUF;
 181   1      }
 182          
 183          
 184          /*******************************************************************************
 185          * Function Name  : CH554UART0Alter()
 186          * Description    : CH554串口0引脚映射, 串口映射到P1.2和P1.3
 187          * Input          : None
 188          * Output         : None
 189          * Return         : None
 190          *******************************************************************************/
 191          void CH554UART0Alter()
 192          {
 193   1          PIN_FUNC |= bUART0_PIN_X;   // 串口映射到P1.2和P1.3
 194   1      }
 195          
 196          
 197          /*******************************************************************************
 198          * Function Name  : UART1Setup()
 199          * Description    : CH554串口1初始化
 200          * Input          : None
 201          * Output         : None
 202          * Return         : None
 203          *******************************************************************************/
 204          void UART1Setup()
 205          {
 206   1          U1SM0 = 0;          // UART1选择8位数据位
 207   1          U1SMOD = 1;         // 快速模式
 208   1          U1REN = 1;          // 使能接收
 209   1          SBAUD1 = UART1_BPS; // 波特率
 210   1      }
 211          
 212          
 213          /*******************************************************************************
 214          * Function Name  : CH554UART1RcvByte()
 215          * Description    : CH554UART1接收一个字节
 216          * Input          : None
 217          * Output         : None
 218          * Return         : SBUF
 219          *******************************************************************************/
 220          UINT8 CH554UART1RcvByte()
 221          {
 222   1          while(U1RI == 0);   // 查询接收, 中断方式可不用
 223   1          U1RI = 0;
 224   1          return SBUF1;
 225   1      }
 226          
 227          
 228          /*******************************************************************************
 229          * Function Name  : CH554UART1SendByte(UINT8 SendDat)
 230          * Description    : CH554UART1发送一个字节
 231          * Input          : UINT8 SendDat；要发送的数据
 232          * Output         : None
 233          * Return         : None
 234          *******************************************************************************/
 235          void CH554UART1SendByte(UINT8 SendDat)
 236          {
 237   1          SBUF1 = SendDat;    // 查询发送, 中断方式可不用下面2条语句, 但发送前需U1TI = 0
 238   1          while(U1TI == 0);
 239   1          U1TI = 0;
 240   1      }
 241          
 242          
 243          /*******************************************************************************
 244          * Function Name  : CH554WDTModeSelect(UINT8 mode)
 245          * Description    : CH554看门狗模式选择
 246          * Input          : UINT8 mode
 247                             0  timer
 248                             1  watchDog
 249          * Output         : None
 250          * Return         : None
 251          *******************************************************************************/
 252          void CH554WDTModeSelect(UINT8 mode)
 253          {
 254   1          SAFE_MOD = 0x55;
 255   1          SAFE_MOD = 0xAA;                // 进入安全模式
 256   1          if(mode)
 257   1              GLOBAL_CFG |=  bWDOG_EN;    // 启动看门狗复位
 258   1          else
 259   1              GLOBAL_CFG &= ~bWDOG_EN;    // 启动看门狗, 仅作为定时器
 260   1          SAFE_MOD = 0x00;                // 退出安全模式
 261   1          WDOG_COUNT = 0;                 // 看门狗赋初值
 262   1      }
 263          
 264          
 265          /*******************************************************************************
 266          * Function Name  : CH554WDTFeed(UINT8 tim)
 267          * Description    : CH554看门狗定时时间设置
 268          * Input          : UINT8 tim 看门狗复位时间设置
 269                             00H(6MHz)=2.8s
 270                             80H(6MHz)=1.4s
 271                             T = (256 - tim) * 65536/Fsys uS
 272                             T = (256 - 0) * 65536/6 uS = 2796202uS = 2.8S
 273          * Output         : None
 274          * Return         : None
 275          *******************************************************************************/
 276          void CH554WDTFeed(UINT8 tim)
 277          {
 278   1          WDOG_COUNT = tim;       // 看门狗计数器赋值
 279   1      }
 280          
 281          
 282          /*******************************************************************************
 283          * Function Name  : CH554SoftReset()
 284          * Description    : CH554软复位
 285          * Input          : None
 286          * Output         : None
 287          * Return         : None
 288          *******************************************************************************/
 289          void CH554SoftReset()
 290          {
 291   1          SAFE_MOD = 0x55;
 292   1          SAFE_MOD = 0xAA;
 293   1          GLOBAL_CFG |= bSW_RESET;
 294   1      }
 295          
 296          
 297          /*******************************************************************************
 298          * Function Name  : CH554USBDevWakeup()
 299          * Description    : CH554设备模式唤醒主机，发送K信号
 300          * Input          : None
 301          * Output         : None
 302          * Return         : None
 303          *******************************************************************************/
 304          void CH554USBDevWakeup()
 305          {
 306   1          UDEV_CTRL |=  bUD_LOW_SPEED;
 307   1          mDelaymS(2);
 308   1          UDEV_CTRL &= ~bUD_LOW_SPEED;
 309   1      }
 310          
C51 COMPILER V9.60.0.0   DEBUG                                                                         12/20/2023 01:20:36 PAGE 2   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CfgFsys (BEGIN)
                                           ; SOURCE LINE # 26
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 34
0000 75A155            MOV     SAFE_MOD,#055H
                                           ; SOURCE LINE # 35
0003 75A1AA            MOV     SAFE_MOD,#0AAH
                                           ; SOURCE LINE # 39
0006 E5B9              MOV     A,CLOCK_CFG
0008 54F8              ANL     A,#0F8H
000A 4405              ORL     A,#05H
000C F5B9              MOV     CLOCK_CFG,A
                                           ; SOURCE LINE # 53
000E E4                CLR     A
000F F5A1              MOV     SAFE_MOD,A
                                           ; SOURCE LINE # 54
0011 22                RET     
             ; FUNCTION CfgFsys (END)

             ; FUNCTION _mDelayuS (BEGIN)
                                           ; SOURCE LINE # 64
;---- Variable 'n' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 65
0000         ?C0002:
                                           ; SOURCE LINE # 77
0000 EF                MOV     A,R7
0001 4E                ORL     A,R6
0002 600D              JZ      ?C0004
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
0004 05A1              INC     SAFE_MOD
                                           ; SOURCE LINE # 82
0006 05A1              INC     SAFE_MOD
                                           ; SOURCE LINE # 85
0008 05A1              INC     SAFE_MOD
                                           ; SOURCE LINE # 100
000A EF                MOV     A,R7
000B 1F                DEC     R7
000C 70F2              JNZ     ?C0002
000E 1E                DEC     R6
000F         ?C0029:
                                           ; SOURCE LINE # 101
000F 80EF              SJMP    ?C0002
                                           ; SOURCE LINE # 102
0011         ?C0004:
0011 22                RET     
             ; FUNCTION _mDelayuS (END)

             ; FUNCTION _mDelaymS (BEGIN)
                                           ; SOURCE LINE # 112
;---- Variable 'n' assigned to Register 'R4/R5' ----
0000 AD07              MOV     R5,AR7
0002 AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 113
0004         ?C0005:
                                           ; SOURCE LINE # 114
0004 ED                MOV     A,R5
0005 4C                ORL     A,R4
0006 600E              JZ      ?C0007
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 120
0008 7FE8              MOV     R7,#0E8H
000A 7E03              MOV     R6,#03H
000C 120000      R     LCALL   _mDelayuS
                                           ; SOURCE LINE # 122
000F ED                MOV     A,R5
0010 1D                DEC     R5
0011 70F1              JNZ     ?C0005
0013 1C                DEC     R4
0014         ?C0030:
                                           ; SOURCE LINE # 123
0014 80EE              SJMP    ?C0005
                                           ; SOURCE LINE # 124
0016         ?C0007:
0016 22                RET     
             ; FUNCTION _mDelaymS (END)

             ; FUNCTION mInitSTDIO (BEGIN)
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
0000 759850            MOV     SCON,#050H
                                           ; SOURCE LINE # 140
0003 C2CD              CLR     RCLK
                                           ; SOURCE LINE # 141
0005 C2CC              CLR     TCLK
                                           ; SOURCE LINE # 142
0007 438780            ORL     PCON,#080H
                                           ; SOURCE LINE # 143
000A E589              MOV     A,TMOD
000C 540F              ANL     A,#0FH
000E 4420              ORL     A,#020H
0010 F589              MOV     TMOD,A
                                           ; SOURCE LINE # 144
0012 43C9A0            ORL     T2MOD,#0A0H
                                           ; SOURCE LINE # 146
0015 758BFF            MOV     TL1,#0FFH
                                           ; SOURCE LINE # 147
0018 758DFF            MOV     TH1,#0FFH
                                           ; SOURCE LINE # 148
001B D28E              SETB    TR1
                                           ; SOURCE LINE # 150
001D D299              SETB    TI
                                           ; SOURCE LINE # 151
001F 22                RET     
             ; FUNCTION mInitSTDIO (END)

             ; FUNCTION _CH554UART0SendByte (BEGIN)
                                           ; SOURCE LINE # 161
;---- Variable 'SendDat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 162
0000         ?C0009:
                                           ; SOURCE LINE # 163
0000 3099FD            JNB     TI,?C0009
                                           ; SOURCE LINE # 164
0003 C299              CLR     TI
                                           ; SOURCE LINE # 165
0005 8F99              MOV     SBUF,R7
                                           ; SOURCE LINE # 166
0007 22                RET     
             ; FUNCTION _CH554UART0SendByte (END)

             ; FUNCTION CH554UART0RcvByte (BEGIN)
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
0000         ?C0012:
                                           ; SOURCE LINE # 178
0000 3098FD            JNB     RI,?C0012
                                           ; SOURCE LINE # 179
0003 C298              CLR     RI
                                           ; SOURCE LINE # 180
0005 AF99              MOV     R7,SBUF
                                           ; SOURCE LINE # 181
0007 22                RET     
             ; FUNCTION CH554UART0RcvByte (END)

             ; FUNCTION CH554UART0Alter (BEGIN)
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
0000 43C610            ORL     PIN_FUNC,#010H
                                           ; SOURCE LINE # 194
0003 22                RET     
             ; FUNCTION CH554UART0Alter (END)

             ; FUNCTION UART1Setup (BEGIN)
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0000 C2C7              CLR     U1SM0
                                           ; SOURCE LINE # 207
0002 D2C5              SETB    U1SMOD
                                           ; SOURCE LINE # 208
0004 D2C4              SETB    U1REN
                                           ; SOURCE LINE # 209
0006 75C2E6            MOV     SBAUD1,#0E6H
                                           ; SOURCE LINE # 210
0009 22                RET     
             ; FUNCTION UART1Setup (END)

             ; FUNCTION CH554UART1RcvByte (BEGIN)
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
0000         ?C0017:
                                           ; SOURCE LINE # 222
0000 30C0FD            JNB     U1RI,?C0017
                                           ; SOURCE LINE # 223
0003 C2C0              CLR     U1RI
                                           ; SOURCE LINE # 224
0005 AFC1              MOV     R7,SBUF1
                                           ; SOURCE LINE # 225
0007 22                RET     
             ; FUNCTION CH554UART1RcvByte (END)

             ; FUNCTION _CH554UART1SendByte (BEGIN)
                                           ; SOURCE LINE # 235
;---- Variable 'SendDat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
0000 8FC1              MOV     SBUF1,R7
0002         ?C0020:
                                           ; SOURCE LINE # 238
0002 30C1FD            JNB     U1TI,?C0020
                                           ; SOURCE LINE # 239
0005 C2C1              CLR     U1TI
                                           ; SOURCE LINE # 240
0007 22                RET     
             ; FUNCTION _CH554UART1SendByte (END)

             ; FUNCTION _CH554WDTModeSelect (BEGIN)
                                           ; SOURCE LINE # 252
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
0000 75A155            MOV     SAFE_MOD,#055H
                                           ; SOURCE LINE # 255
0003 75A1AA            MOV     SAFE_MOD,#0AAH
                                           ; SOURCE LINE # 256
0006 EF                MOV     A,R7
0007 6005              JZ      ?C0023
                                           ; SOURCE LINE # 257
0009 43B101            ORL     GLOBAL_CFG,#01H
000C 8003              SJMP    ?C0024
000E         ?C0023:
                                           ; SOURCE LINE # 259
000E 53B1FE            ANL     GLOBAL_CFG,#0FEH
0011         ?C0024:
                                           ; SOURCE LINE # 260
0011 E4                CLR     A
0012 F5A1              MOV     SAFE_MOD,A
                                           ; SOURCE LINE # 261
0014 F5FF              MOV     WDOG_COUNT,A
                                           ; SOURCE LINE # 262
0016 22                RET     
             ; FUNCTION _CH554WDTModeSelect (END)

             ; FUNCTION _CH554WDTFeed (BEGIN)
                                           ; SOURCE LINE # 276
;---- Variable 'tim' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
0000 8FFF              MOV     WDOG_COUNT,R7
                                           ; SOURCE LINE # 279
0002 22                RET     
             ; FUNCTION _CH554WDTFeed (END)

             ; FUNCTION CH554SoftReset (BEGIN)
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
0000 75A155            MOV     SAFE_MOD,#055H
                                           ; SOURCE LINE # 292
0003 75A1AA            MOV     SAFE_MOD,#0AAH
                                           ; SOURCE LINE # 293
0006 43B110            ORL     GLOBAL_CFG,#010H
                                           ; SOURCE LINE # 294
0009 22                RET     
             ; FUNCTION CH554SoftReset (END)

             ; FUNCTION CH554USBDevWakeup (BEGIN)
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
0000 43D104            ORL     UDEV_CTRL,#04H
                                           ; SOURCE LINE # 307
0003 7F02              MOV     R7,#02H
0005 7E00              MOV     R6,#00H
0007 120000      R     LCALL   _mDelaymS
                                           ; SOURCE LINE # 308
000A 53D1FB            ANL     UDEV_CTRL,#0FBH
                                           ; SOURCE LINE # 309
000D 22                RET     
             ; FUNCTION CH554USBDevWakeup (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    187    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
